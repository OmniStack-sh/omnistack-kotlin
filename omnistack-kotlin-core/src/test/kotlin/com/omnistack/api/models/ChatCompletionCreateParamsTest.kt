// File generated from our OpenAPI spec by Stainless.

package com.omnistack.api.models

import com.omnistack.api.models.*
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class ChatCompletionCreateParamsTest {

    @Test
    fun createChatCompletionCreateParams() {
        ChatCompletionCreateParams.builder()
            .messages(
                listOf(
                    ChatCompletionCreateParams.Message.ofChatCompletionRequestSystemMessage(
                        ChatCompletionCreateParams.Message.ChatCompletionRequestSystemMessage
                            .builder()
                            .content(
                                ChatCompletionCreateParams.Message
                                    .ChatCompletionRequestSystemMessage
                                    .Content
                                    .ofString("string")
                            )
                            .role(
                                ChatCompletionCreateParams.Message
                                    .ChatCompletionRequestSystemMessage
                                    .Role
                                    .SYSTEM
                            )
                            .name("name")
                            .build()
                    )
                )
            )
            .model(ChatCompletionCreateParams.Model.ofString("string"))
            .frequencyPenalty(2.0)
            .functionCall(
                ChatCompletionCreateParams.FunctionCall.ofUnionMember0(
                    ChatCompletionCreateParams.FunctionCall.UnionMember0.NONE
                )
            )
            .functions(
                listOf(
                    ChatCompletionCreateParams.Function.builder()
                        .name("name")
                        .description("description")
                        .parameters(
                            ChatCompletionCreateParams.Function.Parameters.builder().build()
                        )
                        .build()
                )
            )
            .logitBias(ChatCompletionCreateParams.LogitBias.builder().build())
            .logprobs(true)
            .maxCompletionTokens(123L)
            .maxTokens(123L)
            .n(123L)
            .parallelToolCalls(true)
            .presencePenalty(2.0)
            .responseFormat(
                ChatCompletionCreateParams.ResponseFormat.ofResponseFormatText(
                    ChatCompletionCreateParams.ResponseFormat.ResponseFormatText.builder()
                        .type(
                            ChatCompletionCreateParams.ResponseFormat.ResponseFormatText.Type.TEXT
                        )
                        .build()
                )
            )
            .seed(123L)
            .serviceTier(ChatCompletionCreateParams.ServiceTier.AUTO)
            .stop(ChatCompletionCreateParams.Stop.ofString("string"))
            .stream(true)
            .streamOptions(
                ChatCompletionCreateParams.StreamOptions.builder().includeUsage(true).build()
            )
            .temperature(2.0)
            .toolChoice(
                ChatCompletionCreateParams.ToolChoice.ofUnionMember0(
                    ChatCompletionCreateParams.ToolChoice.UnionMember0.NONE
                )
            )
            .tools(
                listOf(
                    ChatCompletionCreateParams.Tool.builder()
                        .function(
                            ChatCompletionCreateParams.Tool.Function.builder()
                                .name("name")
                                .description("description")
                                .parameters(
                                    ChatCompletionCreateParams.Tool.Function.Parameters.builder()
                                        .build()
                                )
                                .strict(true)
                                .build()
                        )
                        .type(ChatCompletionCreateParams.Tool.Type.FUNCTION)
                        .build()
                )
            )
            .topLogprobs(20L)
            .topP(1.0)
            .user("user-1234")
            .build()
    }

    @Test
    fun getBody() {
        val params =
            ChatCompletionCreateParams.builder()
                .messages(
                    listOf(
                        ChatCompletionCreateParams.Message.ofChatCompletionRequestSystemMessage(
                            ChatCompletionCreateParams.Message.ChatCompletionRequestSystemMessage
                                .builder()
                                .content(
                                    ChatCompletionCreateParams.Message
                                        .ChatCompletionRequestSystemMessage
                                        .Content
                                        .ofString("string")
                                )
                                .role(
                                    ChatCompletionCreateParams.Message
                                        .ChatCompletionRequestSystemMessage
                                        .Role
                                        .SYSTEM
                                )
                                .name("name")
                                .build()
                        )
                    )
                )
                .model(ChatCompletionCreateParams.Model.ofString("string"))
                .frequencyPenalty(2.0)
                .functionCall(
                    ChatCompletionCreateParams.FunctionCall.ofUnionMember0(
                        ChatCompletionCreateParams.FunctionCall.UnionMember0.NONE
                    )
                )
                .functions(
                    listOf(
                        ChatCompletionCreateParams.Function.builder()
                            .name("name")
                            .description("description")
                            .parameters(
                                ChatCompletionCreateParams.Function.Parameters.builder().build()
                            )
                            .build()
                    )
                )
                .logitBias(ChatCompletionCreateParams.LogitBias.builder().build())
                .logprobs(true)
                .maxCompletionTokens(123L)
                .maxTokens(123L)
                .n(123L)
                .parallelToolCalls(true)
                .presencePenalty(2.0)
                .responseFormat(
                    ChatCompletionCreateParams.ResponseFormat.ofResponseFormatText(
                        ChatCompletionCreateParams.ResponseFormat.ResponseFormatText.builder()
                            .type(
                                ChatCompletionCreateParams.ResponseFormat.ResponseFormatText.Type
                                    .TEXT
                            )
                            .build()
                    )
                )
                .seed(123L)
                .serviceTier(ChatCompletionCreateParams.ServiceTier.AUTO)
                .stop(ChatCompletionCreateParams.Stop.ofString("string"))
                .stream(true)
                .streamOptions(
                    ChatCompletionCreateParams.StreamOptions.builder().includeUsage(true).build()
                )
                .temperature(2.0)
                .toolChoice(
                    ChatCompletionCreateParams.ToolChoice.ofUnionMember0(
                        ChatCompletionCreateParams.ToolChoice.UnionMember0.NONE
                    )
                )
                .tools(
                    listOf(
                        ChatCompletionCreateParams.Tool.builder()
                            .function(
                                ChatCompletionCreateParams.Tool.Function.builder()
                                    .name("name")
                                    .description("description")
                                    .parameters(
                                        ChatCompletionCreateParams.Tool.Function.Parameters
                                            .builder()
                                            .build()
                                    )
                                    .strict(true)
                                    .build()
                            )
                            .type(ChatCompletionCreateParams.Tool.Type.FUNCTION)
                            .build()
                    )
                )
                .topLogprobs(20L)
                .topP(1.0)
                .user("user-1234")
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.messages())
            .isEqualTo(
                listOf(
                    ChatCompletionCreateParams.Message.ofChatCompletionRequestSystemMessage(
                        ChatCompletionCreateParams.Message.ChatCompletionRequestSystemMessage
                            .builder()
                            .content(
                                ChatCompletionCreateParams.Message
                                    .ChatCompletionRequestSystemMessage
                                    .Content
                                    .ofString("string")
                            )
                            .role(
                                ChatCompletionCreateParams.Message
                                    .ChatCompletionRequestSystemMessage
                                    .Role
                                    .SYSTEM
                            )
                            .name("name")
                            .build()
                    )
                )
            )
        assertThat(body.model()).isEqualTo(ChatCompletionCreateParams.Model.ofString("string"))
        assertThat(body.frequencyPenalty()).isEqualTo(2.0)
        assertThat(body.functionCall())
            .isEqualTo(
                ChatCompletionCreateParams.FunctionCall.ofUnionMember0(
                    ChatCompletionCreateParams.FunctionCall.UnionMember0.NONE
                )
            )
        assertThat(body.functions())
            .isEqualTo(
                listOf(
                    ChatCompletionCreateParams.Function.builder()
                        .name("name")
                        .description("description")
                        .parameters(
                            ChatCompletionCreateParams.Function.Parameters.builder().build()
                        )
                        .build()
                )
            )
        assertThat(body.logitBias())
            .isEqualTo(ChatCompletionCreateParams.LogitBias.builder().build())
        assertThat(body.logprobs()).isEqualTo(true)
        assertThat(body.maxCompletionTokens()).isEqualTo(123L)
        assertThat(body.maxTokens()).isEqualTo(123L)
        assertThat(body.n()).isEqualTo(123L)
        assertThat(body.parallelToolCalls()).isEqualTo(true)
        assertThat(body.presencePenalty()).isEqualTo(2.0)
        assertThat(body.responseFormat())
            .isEqualTo(
                ChatCompletionCreateParams.ResponseFormat.ofResponseFormatText(
                    ChatCompletionCreateParams.ResponseFormat.ResponseFormatText.builder()
                        .type(
                            ChatCompletionCreateParams.ResponseFormat.ResponseFormatText.Type.TEXT
                        )
                        .build()
                )
            )
        assertThat(body.seed()).isEqualTo(123L)
        assertThat(body.serviceTier()).isEqualTo(ChatCompletionCreateParams.ServiceTier.AUTO)
        assertThat(body.stop()).isEqualTo(ChatCompletionCreateParams.Stop.ofString("string"))
        assertThat(body.stream()).isEqualTo(true)
        assertThat(body.streamOptions())
            .isEqualTo(
                ChatCompletionCreateParams.StreamOptions.builder().includeUsage(true).build()
            )
        assertThat(body.temperature()).isEqualTo(2.0)
        assertThat(body.toolChoice())
            .isEqualTo(
                ChatCompletionCreateParams.ToolChoice.ofUnionMember0(
                    ChatCompletionCreateParams.ToolChoice.UnionMember0.NONE
                )
            )
        assertThat(body.tools())
            .isEqualTo(
                listOf(
                    ChatCompletionCreateParams.Tool.builder()
                        .function(
                            ChatCompletionCreateParams.Tool.Function.builder()
                                .name("name")
                                .description("description")
                                .parameters(
                                    ChatCompletionCreateParams.Tool.Function.Parameters.builder()
                                        .build()
                                )
                                .strict(true)
                                .build()
                        )
                        .type(ChatCompletionCreateParams.Tool.Type.FUNCTION)
                        .build()
                )
            )
        assertThat(body.topLogprobs()).isEqualTo(20L)
        assertThat(body.topP()).isEqualTo(1.0)
        assertThat(body.user()).isEqualTo("user-1234")
    }

    @Test
    fun getBodyWithoutOptionalFields() {
        val params =
            ChatCompletionCreateParams.builder()
                .messages(
                    listOf(
                        ChatCompletionCreateParams.Message.ofChatCompletionRequestSystemMessage(
                            ChatCompletionCreateParams.Message.ChatCompletionRequestSystemMessage
                                .builder()
                                .content(
                                    ChatCompletionCreateParams.Message
                                        .ChatCompletionRequestSystemMessage
                                        .Content
                                        .ofString("string")
                                )
                                .role(
                                    ChatCompletionCreateParams.Message
                                        .ChatCompletionRequestSystemMessage
                                        .Role
                                        .SYSTEM
                                )
                                .build()
                        )
                    )
                )
                .model(ChatCompletionCreateParams.Model.ofString("string"))
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.messages())
            .isEqualTo(
                listOf(
                    ChatCompletionCreateParams.Message.ofChatCompletionRequestSystemMessage(
                        ChatCompletionCreateParams.Message.ChatCompletionRequestSystemMessage
                            .builder()
                            .content(
                                ChatCompletionCreateParams.Message
                                    .ChatCompletionRequestSystemMessage
                                    .Content
                                    .ofString("string")
                            )
                            .role(
                                ChatCompletionCreateParams.Message
                                    .ChatCompletionRequestSystemMessage
                                    .Role
                                    .SYSTEM
                            )
                            .build()
                    )
                )
            )
        assertThat(body.model()).isEqualTo(ChatCompletionCreateParams.Model.ofString("string"))
    }
}
